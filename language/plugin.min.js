tinymce.PluginManager.add("language", function (e) { const a = { BROWSER_DEFAULT: { name: "Browser default", nativeName: "Browser default" }, mi: { name: "Māori", nativeName: "te reo Māori" }, en: { name: "English", nativeName: "English" }, zh: { name: "Chinese", nativeName: "中文 (Zhōngwén), 汉语, 漢語" }, hi: { name: "Hindi", nativeName: "हिन्दी, हिंदी" }, ko: { name: "Korean", nativeName: "한국어 (韓國語), 조선말 (朝鮮語)" }, sm: { name: "Samoan", nativeName: "gagana faa Samoa" }, to: { name: "Tonga (Tonga Islands)", nativeName: "faka Tonga" }, tl: { name: "Tagalog", nativeName: "Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔" } }, n = a => { const n = e.selection.getNode(), t = e.selection.getContent({ format: "html" }) || "&#65279", o = "BROWSER_DEFAULT" === a ? `<span id="new_span">${t}</span>` : `<span lang="${a}" id="new_span">${t}</span>`; if (e.selection.setContent(""), "SPAN" === n.nodeName) n.lang ? e.execCommand("mceInsertRawHTML", !1, `</span>${o}<span lang="${n.lang}">`) : e.execCommand("mceInsertRawHTML", !1, `</span>${o}<span>`); else { const a = tinymce.DOM.getParent(n, e => "SPAN" === e.nodeName && !e.dataset.mceBogus); if (a) { let t = n, s = o; for (; t !== a;)s = `<${t.nodeName.toLowerCase()}>${s}</${t.nodeName.toLowerCase()}>`, t = t.parentNode; for (s = a.lang ? `</span>${s}<span lang="${a.lang}">` : `</span>${s}<span>`, t = n; t !== a;)s = `</${t.nodeName.toLowerCase()}>${s}<${t.nodeName.toLowerCase()}>`, t = t.parentNode; e.execCommand("mceInsertRawHTML", !1, s) } else e.execCommand("mceInsertRawHTML", !1, o) } const s = e.dom.get("new_span"); e.selection.select(s), e.selection.collapse(!1), s.removeAttribute("id") }, t = e => { const a = e.selection.getNode(); let n; if ("SPAN" !== a.nodeName || a.dataset.mceBogus) if ("P" === a.nodeName) n = null; else { const e = tinymce.DOM.getParent(a, e => "SPAN" === e.nodeName && !e.dataset.mceBogus); n = e ? e.lang : null } else n = a.lang; return n }; return e.addButton("language", { text: "Browser default language", id: `lang-${e.id}`, onclick: function () { var o = this; const s = e.selection.getNode(), i = e.selection.getStart(), g = e.selection.getEnd(), l = ["B", "U", "I", "STRONG", "EM"]; if (i !== g && !l.includes(i.nodeName) && !l.includes(g.nodeName) || ["OL", "UL"].includes(s.nodeName)) return void e.notificationManager.open({ text: "The region that you have selected is too complex. Try selecting smaller regions, or try changing the language first and then typing your text as desired.", type: "error" }); const c = t(e) || "BROWSER_DEFAULT"; e.windowManager.open({ title: "Language plugin", width: 350, height: 100, body: [{ type: "container", html: `<div>Current language: ${a[c].nativeName}</div>` }, { type: "listbox", name: "language", label: "", values: Object.keys(a).map(e => ({ value: e, text: a[e].nativeName })) }], onsubmit: function (t) { const s = t.data; e.focus(), e.undoManager.transact(() => { n(s.language), o.active("BROWSER_DEFAULT" !== s.language), o.text(a[s.language].nativeName) }) } }) }, onpostrender: function () { var o = this; const s = () => { const n = t(e); n ? o.active(!0) : o.active(!1), n && "BROWSER_DEFAULT" !== n ? o.text(a[n].nativeName) : o.text("Browser default language") }; return e.addShortcut("Meta+L", "Switch to default language", () => { const a = e.selection.getNode(); "BROWSER_DEFAULT" !== (a.lang ? a.lang : "BROWSER_DEFAULT") && e.undoManager.transact(() => { n("BROWSER_DEFAULT"), o.active(!1), s() }) }), e.on("keyup", s), e.on("click", s), () => { e.off("keyup", s), e.off("click", s) } } }), { getMetadata: () => ({ name: "Language plugin" }) } });